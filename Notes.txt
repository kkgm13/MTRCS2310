NOTES:
----------Functional Requirements----------
1: List all terminus in the MTR network
	1.1: For each MTR Line in the network, list ALL terminus
		- Method will read from file, ignoring the 1st name and take the 2nd and last name on a line and outputs it as the terminus.
		Related Class Included
			> Line
			> Station
			> ReadFile
		Related Data Structure:
			* DoublyLinkedList
2: List all stations in a line in the MTR network
	2.1: For a MTR Line, list all the station stops
		- Method will read the input, check the 1st name of each line
		- Prints off all names on that line ignoring 1st name.
		Related Class Included
			> Line
			> Station
			> ReadFile
		Related Data Structure:
			* LinkedList
3: List all lines that are directly connected to a line
	3.1 In a line, list out ALL connecting lines
		eg: Island Line = Tsuen Wan Line, South Island Line, Tseung Kwan O Line
		- Similar to previous, except stores all the station in that input line instead of showing them.
		- Compare each station name stored to each station name in the files and when a match comes up it will output the 1st name of said line.
		Related Class Included
			> Line
			> Station
			> ReadFile
		Related Data Structure:
			*  
4: Find a path between two stations
	4.1: Find a path between two stations
		Needed Classes:
			- http://archive.oreilly.com/oreillyschool/courses/data-structures-algorithms/graphDataStructures.html
		Related Class Included
			> Line
			> Station
			> ReadFile
		Related Data Structure
			* Stack

----------Non-Functional Requirements----------
1. The processing of each query must be done in linear time (i.e. O(n)) or less. Depending
	on the query, n may be the number of lines or the total number of stations in the given MTR network.
	- List all terminus in the MTR network
		~ 3 Milliseconds (May need to Redo after refactoring)
	- List all stations in a line in the MTR network
		~ Avg. 2.16 Milliseconds (May need to Redo after refactoring)
	- List all lines that are directly connected to a line
		~ __ Milliseconds (May need to Redo after refactoring)
	- Find a path between two stations
		~ __ Milliseconds (May need to Redo after refactoring)
2. A user will interact with the system through the given Text-based User Interface (TUI),
	with all output being displayed by the standard output stream.
3. The display of results for each query must be clear and easy to understand.
	- Text and Data Formatting
4. The application must be robust and display appropriate messages should any run time errors (e.g. no result found) occur.
	- Exception Errors and Data from NFR #3